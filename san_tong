<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>北京三童科技有限公司</title>
    <style>
        * {
            padding: 0;
            margin: 0;
        }

        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            height: 100vh;
            margin: 0;
            padding: 0;
            background-image: linear-gradient(-225deg, #f37e75 0%,
            #f4ac87 29%, #f6f19a 100%);
        }

        canvas {
            position: fixed;
            width: 100%;
            height: 100%;
        }
        .slogan {
            font: 900 40px '';
            text-align: center;
            letter-spacing: 5px;
            background: linear-gradient(-225deg, #ef796e 0%, #fd1e1e 29%, #ecc607 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .login {
            width: 1000px;
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(
                    to right bottom,
                    rgba(255, 255, 255, 0.7),
                    rgba(255, 255, 255, 0.5),
                    rgba(255, 255, 255, 0.4)
            );
            backdrop-filter: blur(10px);
            box-shadow: 0 0 20px #feea9b;
            border-radius: 15px;
            margin: auto; /* 使login块水平居中 */
            margin-top: 500px; /* 使login块在垂直方向适当居中 */
        }
        .introduction {
            display: flex;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            margin-top: 6px;
            margin-bottom: 20px;
            color: red;
            outline: none;
            border: 0;
            /*padding: 10px;*/
            background-color: transparent;
            border-bottom: 3px solid rgb(244, 150, 10);
            font: 400 60px '楷体';
            display: flex;

            align-items: center;
            gap: 5px;
            justify-content: flex-start; /* 按钮在左侧对齐 */
            width: 100%;
            padding-left: 10%;
        }
        .btn {
            padding: 4px 8px;
            font-size: 20px;
            border: 1px solid rgb(244, 196, 74);
            background-color: #f4f0a2;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
            z-index: 10; /* 确保按钮在页面的上层 */
            position: relative; /* 使z-index生效 */
            margin-right: 10px;
        }
        .btn:hover {
            background-color: #ed744f;
        }
        .img1{
            position: absolute;
            top: 50px;  /* 距离页面顶部50px */
            left: 50px; /* 距离页面左侧100px */
            width: 300px;
            height: 200px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(
                    to right bottom,
                    rgba(255, 255, 255, 0.7),
                    rgba(255, 255, 255, 0.5),
                    rgba(255, 255, 255, 0.4)
            );
            backdrop-filter: blur(10px);
            box-shadow: 0 0 20px #feea9b;
            border-radius: 15px;
        }
        .img2{
            position: absolute;
            top: 50px;  /* 距离页面顶部50px */
            left: 550px; /* 距离页面左侧100px */
            width: 300px;
            height: 200px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(
                    to right bottom,
                    rgba(255, 255, 255, 0.7),
                    rgba(255, 255, 255, 0.5),
                    rgba(255, 255, 255, 0.4)
            );
            backdrop-filter: blur(10px);
            box-shadow: 0 0 20px #feea9b;
            border-radius: 15px;
        }
        .img3{
            position: absolute;
            top: 50px;  /* 距离页面顶部50px */
            left: 1050px; /* 距离页面左侧100px */
            width: 300px;
            height: 200px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(
                    to right bottom,
                    rgba(255, 255, 255, 0.7),
                    rgba(255, 255, 255, 0.5),
                    rgba(255, 255, 255, 0.4)
            );
            backdrop-filter: blur(10px);
            box-shadow: 0 0 20px #feea9b;
            border-radius: 15px;
        }
        .img4{
            position: absolute;
            top: 50px;  /* 距离页面顶部50px */
            left: 1550px; /* 距离页面左侧100px */
            width: 300px;
            height: 200px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(
                    to right bottom,
                    rgba(255, 255, 255, 0.7),
                    rgba(255, 255, 255, 0.5),
                    rgba(255, 255, 255, 0.4)
            );
            backdrop-filter: blur(10px);
            box-shadow: 0 0 20px #feea9b;
            border-radius: 15px;
        }
        .scroll-down-arrow {

            bottom: 10px; /* 距离底部10px */
            left: 50%;
            transform: translateX(-50%); /* 水平居中 */
            font-size: 24px; /* 根据需要调整箭头大小 */
            color: rgba(0, 0, 0, 0.3); /* 几乎透明的颜色 */
            cursor: pointer;
            transition: color 0.3s;
            z-index: 10; /* 确保按钮在页面的上层 */
            position: fixed
        }

        .scroll-down-arrow:hover {
            color: rgba(0, 0, 0, 0.6); /* 鼠标悬停时箭头变得稍微清晰 */
        }
        .office{
            height:450px;
            width: 800px;
            margin-top: 1500px;
        }
    </style>
</head>

<body>
<div class="login">
        <p class="slogan">“追风赶月莫停留,平芜尽处是春山。”</p>
</div>
<div class="introduction">
    <button class="btn">首页</button>
    <button class="btn">公司介绍</button>
    <button class="btn">合作公司</button>
    <button class="btn">产品项目</button>
    <button class="btn">加入我们</button>
</div>
<div class="img1">
    图片
</div>
<div class="img2">
    图片
</div>
<div class="img3">
    图片
</div>
<div class="img4">
    图片
</div>
<div class="scroll-down-arrow">
    ↓
</div>
<canvas></canvas>
<img class="office" src="../first_page/1.jpg" alt="图片" title="图片">
</body>
<script>


    const STAR_COLOR = '#fff';
    const STAR_SIZE = 3;
    const STAR_MIN_SCALE = 0.2;
    const OVERFLOW_THRESHOLD = 50;
    const STAR_COUNT = (window.innerWidth + window.innerHeight) / 8;
    const canvas = document.querySelector('canvas');
    const context = canvas.getContext('2d');

    let scale = 1; // device pixel ratio
    let width;
    let height;
    let stars = [];
    let pointerX;
    let pointerY;
    let velocity = { x: 0, y: 0, tx: 0, ty: 0, z: 0.0009 };
    let touchInput = false;
    generate();
    resize();
    step();
    window.onresize = resize;
    canvas.onmousemove = onMouseMove;
    canvas.ontouchmove = onTouchMove;
    canvas.ontouchend = onMouseLeave;
    document.onmouseleave = onMouseLeave;
    function generate() {
        for (let i = 0; i < STAR_COUNT; i++) {
            stars.push({
                x: 0,
                y: 0,
                z: STAR_MIN_SCALE + Math.random() * (1 - STAR_MIN_SCALE),
            });
        }
    }
    // 将星星放置到随机位置
    function placeStar(star) {
        star.x = Math.random() * width;
        star.y = Math.random() * height;
    }
    // 回收星星并重新放置到新的位置
    function recycleStar(star) {
        // 初始化方向为 'z'
        let direction = 'z';
        // 获取速度的绝对值
        let vx = Math.abs(velocity.x);
        let vy = Math.abs(velocity.y);
        // 如果速度的绝对值大于1，则根据速度的大小随机确定方向
        if (vx > 1 || vy > 1) {
            let axis;
            // 如果水平速度大于垂直速度，则根据水平速度的比例随机确定水平或垂直方向
            if (vx > vy) {
                axis = Math.random() < vx / (vx + vy) ? 'h' : 'v';
            } else {
                axis = Math.random() < vy / (vx + vy) ? 'v' : 'h';
            }
            // 根据方向确定具体的移动方向
            if (axis === 'h') {
                direction = velocity.x > 0 ? 'l' : 'r';
            } else {
                direction = velocity.y > 0 ? 't' : 'b';
            }
        }
        // 随机设置星星的缩放比例
        star.z = STAR_MIN_SCALE + Math.random() * (1 - STAR_MIN_SCALE);
        // 根据方向设置星星的位置
        if (direction === 'z') {
            star.z = 0.1;
            star.x = Math.random() * width;
            star.y = Math.random() * height;
        } else if (direction === 'l') {
            star.x = -OVERFLOW_THRESHOLD;
            star.y = height * Math.random();
        } else if (direction === 'r') {
            star.x = width + OVERFLOW_THRESHOLD;
            star.y = height * Math.random();
        } else if (direction === 't') {
            star.x = width * Math.random();
            star.y = -OVERFLOW_THRESHOLD;
        } else if (direction === 'b') {
            star.x = width * Math.random();
            star.y = height + OVERFLOW_THRESHOLD;
        }
    }
    // 调整大小
    function resize() {
        scale = window.devicePixelRatio || 1;
        width = window.innerWidth * scale;
        height = window.innerHeight * scale;
        canvas.width = width;
        canvas.height = height;
        stars.forEach(placeStar);
    }
    // 动画的每一帧
    function step() {
        // 清空画布
        context.clearRect(0, 0, width, height);
        // 更新星星的位置和速度
        update();
        // 绘制星星
        render();
        // 请求下一帧动画
        requestAnimationFrame(step);
    }
    // 更新星星的位置和速度
    function update() {
        // 缓动速度
        velocity.tx *= 0.96;
        velocity.ty *= 0.96;
        // 更新速度
        velocity.x += (velocity.tx - velocity.x) * 0.8;
        velocity.y += (velocity.ty - velocity.y) * 0.8;
        // 遍历所有星星
        stars.forEach((star) => {
            // 根据速度和缩放比例更新星星的位置
            star.x += velocity.x * star.z;
            star.y += velocity.y * star.z;
            // 根据速度和缩放比例更新星星的位置（使星星围绕屏幕中心旋转）
            star.x += (star.x - width / 2) * velocity.z * star.z;
            star.y += (star.y - height / 2) * velocity.z * star.z;
            // 更新星星的缩放比例
            star.z += velocity.z;
            // 如果星星超出屏幕范围，则重新放置到屏幕上
            if (
                star.x < -OVERFLOW_THRESHOLD ||
                star.x > width + OVERFLOW_THRESHOLD ||
                star.y < -OVERFLOW_THRESHOLD ||
                star.y > height + OVERFLOW_THRESHOLD
            ) {
                recycleStar(star);
            }
        });
    }
    // 绘制星星
    function render() {
        // 遍历所有星星
        stars.forEach((star) => {
            // 设置绘制星星的样式
            context.beginPath();
            context.lineCap = 'round';
            context.lineWidth = STAR_SIZE * star.z * scale;
            context.globalAlpha = 0.5 + 0.5 * Math.random();
            context.strokeStyle = STAR_COLOR;
            // 绘制星星的路径
            context.beginPath();
            context.moveTo(star.x, star.y);
            // 计算星星的尾巴坐标
            let tailX = velocity.x * 2;
            let tailY = velocity.y * 2;
            // 如果尾巴坐标的绝对值小于0.1，则设置为0.5
            if (Math.abs(tailX) < 0.1) tailX = 0.5;
            if (Math.abs(tailY) < 0.1) tailY = 0.5;
            // 绘制星星的尾巴
            context.lineTo(star.x + tailX, star.y + tailY);
            context.stroke();
        });
    }
    // 移动鼠标指针
    function movePointer(x, y) {
        // 如果之前有记录鼠标指针的位置，则计算鼠标指针的移动距离，并更新速度
        if (typeof pointerX === 'number' && typeof pointerY === 'number') {
            let ox = x - pointerX;
            let oy = y - pointerY;
            velocity.tx = velocity.tx + (ox / 8) * scale * (touchInput ? 1 : -1);
            velocity.ty = velocity.ty + (oy / 8) * scale * (touchInput ? 1 : -1);
        }
        // 更新鼠标指针的位置
        pointerX = x;
        pointerY = y;
    }
    // 当鼠标在canvas上移动时的事件处理函数
    function onMouseMove(event) {
        touchInput = false;
        movePointer(event.clientX, event.clientY);
    }
    // 当触摸屏在canvas上移动时的事件处理函数
    function onTouchMove(event) {
        touchInput = true;
        movePointer(event.touches[0].clientX, event.touches[0].clientY, true);
        event.preventDefault();
    }
    // 当鼠标离开canvas时的事件处理函数
    function onMouseLeave() {
        pointerX = null;
        pointerY = null;
    }
    document.querySelector('.scroll-down-arrow').addEventListener('click', function() {
        window.scrollBy({
            top: window.innerHeight, // 滚动距离等于当前视口高度
            left: 0,
            behavior: 'smooth' // 平滑滚动
        });
    });
</script>

</html>
